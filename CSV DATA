			Try to distribute the total product orders by their categories 	and their % share, also show each city's top and worst selling products
            */
   WITH city_categories AS 
	(
		SELECT 
				dim_customers.city,
                dim_products.product_name,
                dim_products.category,
				COUNT(fact_order_lines.order_id) AS total_orders
         FROM fact_order_lines 
         JOIN dim_customers ON fact_order_lines.customer_id = dim_customers.customer_id
         JOIN dim_products ON fact_order_lines.product_id = dim_products.product_id
         GROUP BY dim_customers.city, dim_products.category 
      ),
		categories_totals AS 
       (
			SELECT 
				city,
				SUM(CASE WHEN category = 'dairy' THEN total_orders ELSE 0 END) AS 'dairy_total',
                SUM(CASE WHEN category = 'food' THEN total_orders ELSE 0 END) AS 'food_total',
                SUM(CASE WHEN category = 'beverages' THEN total_orders ELSE 0 END) AS 'beverages_total',
                SUM(total_orders) AS total_orders 
            FROM city_categories
            GROUP BY city
         )
         SELECT 
			city_categories.city,
            city_categories.category,
			city_categories.total_orders,
            CONCAT(ROUND((city_categories.total_orders/categories_totals.total_orders)*100,2) , "%")AS percent_share,
            MAX(CASE WHEN city_categories.total_orders = 
					(SELECT MAX(total_orders) FROM city_categories c2 WHERE c2.city = city_categories.city) THEN 
						city_categories.product_name  ELSE NULL END) as top_selling_products,
            MIN(CASE WHEN city_categories.total_orders = 
					(SELECT MIN(total_orders) FROM city_categories c2 WHERE c2.city = city_categories.city) THEN 
						city_categories.product_name ELSE NULL END) as least_selling_products
         FROM city_categories 
         JOIN categories_totals ON city_categories.city = categories_totals.city
         GROUP BY city_categories.city, city_categories.category
         ORDER BY city_categories.city, percent_share DESC;
         
  /* Que. 12 
			Analyze the trend of on time delivery over the months */

SELECT 
	MONTH(order_date) AS month,
    COUNT(order_id) AS Total_orders,
    SUM(CASE WHEN fact_order_lines.On_Time = 1 THEN 1 ELSE 0 END) AS on_time_orders,
    (SUM(CASE WHEN fact_order_lines.On_Time = 1 THEN 1 ELSE 0 END) / COUNT(fact_order_lines.order_id) *100 ) AS on_time_pct 
FROM 
		fact_order_lines
GROUP BY 
			MONTH(order_date)
ORDER BY 
				MONTH(order_date);
                
/* Que. 13 
			Analyze the trend of In Full delivery over the months */
            
SELECT 
		MONTH(order_date) AS Month,
        COUNT(order_id) AS Total_orders,
        SUM(CASE WHEN fact_order_lines.In_Full = 1 THEN 1 ELSE 0 END ) AS in_full_orders,
        (SUM(CASE WHEN fact_order_lines.In_Full = 1 THEN 1 ELSE 0 END) / COUNT(fact_order_lines.order_id) * 100) AS in_full_pct
FROM 
			fact_order_lines
GROUP BY 
				MONTH(order_date)
ORDER BY 
				MONTH(order_date);	
        
 /* Que. 14 
			Analyze the trend of In Full and On time delivery over months */
            
  SELECT 
		MONTH(order_date) AS Month,
        COUNT(order_id) AS Total_Orders,
        SUM(CASE WHEN fact_order_lines.On_Time_In_Full= 1 THEN 1 ELSE 0 END) AS otif_orders,
        (SUM(CASE WHEN fact_order_lines.On_Time_In_Full = 1 THEN 1 ELSE 0 END) / COUNT(fact_order_lines.order_id) * 100)  AS otif_orders_pct
  FROM 
		fact_order_lines
  GROUP BY 
		MONTH(order_date)
  ORDER BY 
		MONTH(order_date);
        
 /* Que. 15 
			Analyze the customer orders count distribution by day of week */
            
 SELECT 
    WEEKDAY(order_date) AS Day_no,
    CASE WEEKDAY(order_date)
		WHEN 0 THEN 'Sunday'
        WHEN 1 THEN 'Monday'
        WHEN 2 THEN 'Tuesday'
        WHEN 3 THEN 'Wednwsday'
        WHEN 4 THEN 'Thursday'
        WHEN 5 THEN 'Friday'
        WHEN 6 THEN 'Saturday'
     END AS Day_Name  ,  
	COUNT(order_id) AS Total_orders
 FROM 
	fact_order_lines
 GROUP BY 
	Day_Name
 ORDER BY 
    Total_orders DESC;
      
/* Que.16  provide the average number of days between order placement and delivery for all orders by city. */

SELECT 
	c.city,
    ROUND(AVG(DATEDIFF(delivery_date, order_date)),2) AS Average_days
FROM 
	fact_order_lines ol
JOIN 
	dim_customers c ON ol.customer_id = c.customer_id
GROUP BY 
		c.city
ORDER BY 
		Average_days DESC;
        
 /* Que. Calculate the average lead time for each customer */
 
 SELECT 
	c.customer_name,
    ROUND(AVG(DATEDIFF(delivery_date, order_date)),2) AS Average_Time
FROM 
		fact_order_lines ol
JOIN 
			dim_customers c ON ol.customer_id = c.customer_id
GROUP BY
			c.customer_name
ORDER BY 
				Average_Time;

